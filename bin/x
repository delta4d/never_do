#!/usr/bin/env ruby

require "colorize"

require "date"
require "fileutils"

PATH   = "#{ENV["HOME"]}/.never_do"
EDITOR = ENV["EDITOR"] || "vi"

class Task
    DELIM = "`"

    attr_reader :desc, :start, :finish

    def initialize(desc, start=-1, finish=-1)
        @desc   = desc
        @start  = start == -1 ? _now : start
        @finish = finish

        @start = @start.to_i
        @finish = @finish.to_i
    end

    def finish!
        @finish = _now
        self
    end

    def finish?
        @finish != -1
    end

    def to_s
        [@desc, @start.to_s, @finish.to_s].join(DELIM)
    end

    def pp
        "[#{_time(@start).colorize(:cyan)} ~ #{_time(@finish).colorize(:yellow)}] #{@desc.colorize(:blue)}"
    end

    class << self
        # backtick ` is the delimiter
        def parse(str)
            Task.new(*str.split(DELIM))
        end
    end

    private

    def _now
        Time.now.to_i
    end

    def _time(t)
        t == -1 ? "infinity" : Time.at(t).localtime.strftime("%m/%d %H:%M")
    end
end

class X
    def initialize()
        _ensure_file_structure
        @ys = _load("#{PATH}/y")
        @zs = _load("#{PATH}/z")
    end

    def add(task)
        @ys << Task.new(task)
        _save
    end

    def list(done=false)
        ls = done ? @zs : @ys
        len = ls.size.to_s.length
        ls.map.with_index { |t, i| "    #{i.to_s.ljust(len)}. #{done ? '✔'.colorize(:green) : '✘'.colorize(:red)} #{t.pp}" }
    end

    # after finishing one task, the id is renumbered
    def finish(id)
        @zs << @ys.slice!(id).finish!
        _save
        @zs.last
    end

    def edit(file)
        system "#{EDITOR} #{PATH}/#{file}"
    end

    def generate(output)
        output ||= "./task_log.md"
        begin
            # group by year, then group by month
            File.open(output, "w") do |f|
                [*@ys, *@zs].group_by { |t| Time.at(t.start).year }.each do |year, y_tasks|
                    y_tot  = y_tasks.size
                    y_done = 0

                    f.puts "## #{year}"
                    f.puts "\n------"
                    f.puts

                    y_tasks.group_by { |t| Time.at(t.start).month }.each do |month, m_tasks|
                        cur_month = Date::MONTHNAMES[month]
                        m_tot  = m_tasks.size
                        m_done = 0

                        f.puts "### #{cur_month}"
                        f.puts "\n------"
                        f.puts

                        m_tasks.sort_by(&:start).each do |task|
                            mark = task.finish? ? "x" : " "
                            m_done += 1 if task.finish?
                            f.puts "- [#{mark}] #{task.desc}"
                        end

                        f.puts "\nIn #{cur_month}, you have #{m_tot} tasks, finished #{m_done} tasks, complete #{(100.0*m_done/m_tot).round(2)}% of them.\n"

                        y_done += m_done
                    end

                    f.puts "\nIn year #{year}, you have #{y_tot} tasks, finished #{y_done} tasks, complete #{(100.0*y_done/y_tot).round(2)}% of them.\n"
                end
            end

            puts "task list is generated to #{output}"
        rescue
            puts "File open error, make sure #{output} is a file"
        end
    end

    private

    def _ensure_file_structure
        Dir.exist?(PATH)         || FileUtils.mkdir_p(PATH)
        File.exist?("#{PATH}/y") || FileUtils.touch("#{PATH}/y")
        File.exist?("#{PATH}/z") || FileUtils.touch("#{PATH}/z")
    end

    def _load(file)
        File.readlines(file).map { |line| Task.parse(line) }
    end

    def _save
        %w[y z].each do |x|
            File.open("#{PATH}/#{x}", "w") do |f|
                instance_variable_get("@#{x}s").each do |task|
                    f.puts task.to_s
                end
            end
        end
    end
end

def help
    puts <<-EOH.gsub(/^\s*\|/, "")
        |
        |   Usage: x [OPTION] [ID|TASK|FILE]
        |
        |       add      TASK        add a task
        |       list                 list all tasks
        |       finish   ID          finish task with ID
        |       edit     [yz]        edit todo file "y" or done file "z"
        |       generate [OUTFILE]   generate task log to PATH
        |       help                 see me
    EOH
end

def never_do
    x = X.new
    action = ARGV.shift
    case action
    when /^a.*/
        x.add(ARGV.join(" "))
    when /^l.*/, nil
        puts
        x.list(!ARGV.empty?).each { |t| puts t }
    when /^f.*/
        task = x.finish(ARGV.first.to_i).desc
        puts "finish task: #{task}"
    when /^e.*/
        file = ARGV.first
        (file == "y" || file == "z") ? x.edit(file) : help
    when /^g.*/
        x.generate(ARGV.first)
    else
        help
    end
end

never_do

# vim:ts=4:et
